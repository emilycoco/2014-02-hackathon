<!doctype html>
<html ng-app="musicApp">
  <head>
    <meta charset="utf-8" />
    <title>Shortly</title>
    <link rel="stylesheet" type="text/css" href="style.css">
    <script src="/lib/jquery.js"></script>
    <script src="/lib/underscore.js"></script>
    <script src="/lib/backbone.js"></script>
    <script src="/lib/handlebars.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.15/angular.min.js"></script>
    <script src="/client/musicApp.js"></script>


  </head>

  <body ng-controller="musicController">
    <h1>Music</h1>
      <div ng-controller= "getArtist">
        <form>
        <div>
          <label for="artist">Song:</label>
          <input name="name" ng-model="artist.name" type="text">
        </div>
        <div>
          <input ng-click="getVideo(artist.name)" type="submit" value="search">
        </div>
    </form>
    <p>Artist: {{artist.name}}</p>
    </div>
      <div id="player"></div>

    <script>
      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player;
      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '300',
          width: '500',
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });
      }

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        player.cueVideoById('1TffpkE2GU4');
        player.cueVideoById("2dV1ZOyrK7Y");
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      var done = false;
      function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING && !done) {
          setTimeout(stopVideo, 6000);
          done = true;
        }
      }
      function stopVideo() {
        player.stopVideo();
      }
    </script>
    <div ng-controller="getLyrics">
      <h1>Lyrics</h1>
      <p ng-model="lyrics">{{song.lyrics}}</p>
    </div>
  </body>
</html>
