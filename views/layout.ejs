<!doctype html>
<html ng-app="musicApp">
  <head>
    <meta charset="utf-8" />
    <title>Karaoke</title>
    <link rel="stylesheet" type="text/css" href="style.css">
    <script src="/lib/jquery.js"></script>
    <script src="/lib/underscore.js"></script>
    <script src="/lib/backbone.js"></script>
    <script src="/lib/handlebars.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.15/angular.min.js"></script>
    <script src="/client/musicApp.js"></script>


  </head>

  <body ng-controller="musicController">
    <h1>Karaoke</h1>
      <div ng-controller= "getArtist" class="search">
        <form>
        <div>
          <label for="artist">Song:</label>
          <input name="name" ng-model="artist.name" type="text">
        </div>
        <div>
          <input ng-click="getVideo(artist.name)" type="submit" value="Add To Queue">
        </div>
    </form>
    <p>Add To Queue: {{artist.name}}</p>
    </div>
      <div id="player"></div>

    <script>
      var playList = ["Yfx5vS7146I"];
      var count = 1;
      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player;
      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '400',
          width: '700',
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });
      }

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        player.cuePlaylist(playList, playList.length);
      }
      function onPlayerStateChange(event) {
     
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      var done = false;
      function onPlayerStateChange(event) {
        count++;
        if (event.data == YT.PlayerState.PLAYING && !done) {
          player.cuePlaylist(playList, playList.length - 1);
          done = true;
        }
      }
      function stopVideo() {
        player.stopVideo();
      }
    </script>
    <div ng-controller="getLyrics"  class="lyrics">
      <p ng-model="lyrics">
      <h1>Lyrics</h1>
        Dark Star
        </br>
        [Verse 1: Jaymes Young]</br>
        I've looked a long time to find you</br>
        I drifted through the universe, just to lay beside you</br>
        Anywhere you want me to take you, I'll go (yeah)</br>
        But there's things about me that you just don't know</br>
        </br>
        [Hook]</br>
        If I told you where I've been</br>
        Would you still call me baby?</br>
        And if I told you everything</br>
        Would you call me crazy?</br>
        </br>
        Cause baby I'm a dark star, dark star, ohh (x2)</br>
        </br>
        [Verse 2: Jaymes Young]</br>
        My heart was born out of the fire</br>
        I lost love a thousand years ago</br>
        And still, I can't find her</br>
        Now I don't love like I used to</br>
        But I've got stories I could tell you,</br>
        If I want to</br>
      </p>
    </div>
  </body>
</html>
